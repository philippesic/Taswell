// Generated from TaswellGrammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MyGrammarLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly INT = 9;
	public static readonly FLOAT = 10;
	public static readonly STRING = 11;
	public static readonly PLUS = 12;
	public static readonly MINUS = 13;
	public static readonly STAR = 14;
	public static readonly SLASH = 15;
	public static readonly EQ = 16;
	public static readonly SEMI = 17;
	public static readonly LPAREN = 18;
	public static readonly RPAREN = 19;
	public static readonly LBRACE = 20;
	public static readonly RBRACE = 21;
	public static readonly COMMA = 22;
	public static readonly WS = 23;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "INT", 
		"FLOAT", "STRING", "PLUS", "MINUS", "STAR", "SLASH", "EQ", "SEMI", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'fn'", "'func'", "':'", "'let'", "'int'", "'float'", "'string'", 
		"'[a-zA-Z_][a-zA-Z0-9_]'", undefined, undefined, undefined, "'+'", "'-'", 
		"'*'", "'/'", "'='", "';'", "'('", "')'", "'{'", "'}'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "INT", "FLOAT", "STRING", "PLUS", "MINUS", "STAR", 
		"SLASH", "EQ", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MyGrammarLexer._LITERAL_NAMES, MyGrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MyGrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MyGrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TaswellGrammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return MyGrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MyGrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MyGrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MyGrammarLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\xA2\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x05\nh\n\n\x03\n\x06\nk\n\n\r\n\x0E\n" +
		"l\x03\v\x05\vp\n\v\x03\v\x06\vs\n\v\r\v\x0E\vt\x03\v\x03\v\x06\vy\n\v" +
		"\r\v\x0E\vz\x03\f\x03\f\x07\f\x7F\n\f\f\f\x0E\f\x82\v\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16" +
		"\x03\x16\x03\x17\x03\x17\x03\x18\x06\x18\x9D\n\x18\r\x18\x0E\x18\x9E\x03" +
		"\x18\x03\x18\x02\x02\x02\x19\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
		"\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
		"\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%" +
		"\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19\x03\x02\x05\x03" +
		"\x022;\x05\x02\f\f\x0F\x0F$$\x05\x02\v\f\x0F\x0F\"\"\x02\xA8\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03" +
		"\x02\x02\x02\x031\x03\x02\x02\x02\x054\x03\x02\x02\x02\x079\x03\x02\x02" +
		"\x02\t;\x03\x02\x02\x02\v?\x03\x02\x02\x02\rC\x03\x02\x02\x02\x0FI\x03" +
		"\x02\x02\x02\x11P\x03\x02\x02\x02\x13g\x03\x02\x02\x02\x15o\x03\x02\x02" +
		"\x02\x17|\x03\x02\x02\x02\x19\x85\x03\x02\x02\x02\x1B\x87\x03\x02\x02" +
		"\x02\x1D\x89\x03\x02\x02\x02\x1F\x8B\x03\x02\x02\x02!\x8D\x03\x02\x02" +
		"\x02#\x8F\x03\x02\x02\x02%\x91\x03\x02\x02\x02\'\x93\x03\x02\x02\x02)" +
		"\x95\x03\x02\x02\x02+\x97\x03\x02\x02\x02-\x99\x03\x02\x02\x02/\x9C\x03" +
		"\x02\x02\x0212\x07h\x02\x0223\x07p\x02\x023\x04\x03\x02\x02\x0245\x07" +
		"h\x02\x0256\x07w\x02\x0267\x07p\x02\x0278\x07e\x02\x028\x06\x03\x02\x02" +
		"\x029:\x07<\x02\x02:\b\x03\x02\x02\x02;<\x07n\x02\x02<=\x07g\x02\x02=" +
		">\x07v\x02\x02>\n\x03\x02\x02\x02?@\x07k\x02\x02@A\x07p\x02\x02AB\x07" +
		"v\x02\x02B\f\x03\x02\x02\x02CD\x07h\x02\x02DE\x07n\x02\x02EF\x07q\x02" +
		"\x02FG\x07c\x02\x02GH\x07v\x02\x02H\x0E\x03\x02\x02\x02IJ\x07u\x02\x02" +
		"JK\x07v\x02\x02KL\x07t\x02\x02LM\x07k\x02\x02MN\x07p\x02\x02NO\x07i\x02" +
		"\x02O\x10\x03\x02\x02\x02PQ\x07]\x02\x02QR\x07c\x02\x02RS\x07/\x02\x02" +
		"ST\x07|\x02\x02TU\x07C\x02\x02UV\x07/\x02\x02VW\x07\\\x02\x02WX\x07a\x02" +
		"\x02XY\x07_\x02\x02YZ\x07]\x02\x02Z[\x07c\x02\x02[\\\x07/\x02\x02\\]\x07" +
		"|\x02\x02]^\x07C\x02\x02^_\x07/\x02\x02_`\x07\\\x02\x02`a\x072\x02\x02" +
		"ab\x07/\x02\x02bc\x07;\x02\x02cd\x07a\x02\x02de\x07_\x02\x02e\x12\x03" +
		"\x02\x02\x02fh\x07/\x02\x02gf\x03\x02\x02\x02gh\x03\x02\x02\x02hj\x03" +
		"\x02\x02\x02ik\t\x02\x02\x02ji\x03\x02\x02\x02kl\x03\x02\x02\x02lj\x03" +
		"\x02\x02\x02lm\x03\x02\x02\x02m\x14\x03\x02\x02\x02np\x07/\x02\x02on\x03" +
		"\x02\x02\x02op\x03\x02\x02\x02pr\x03\x02\x02\x02qs\t\x02\x02\x02rq\x03" +
		"\x02\x02\x02st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02uv\x03" +
		"\x02\x02\x02vx\x070\x02\x02wy\t\x02\x02\x02xw\x03\x02\x02\x02yz\x03\x02" +
		"\x02\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{\x16\x03\x02\x02\x02|\x80" +
		"\x07$\x02\x02}\x7F\n\x03\x02\x02~}\x03\x02\x02\x02\x7F\x82\x03\x02\x02" +
		"\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x83\x03\x02\x02" +
		"\x02\x82\x80\x03\x02\x02\x02\x83\x84\x07$\x02\x02\x84\x18\x03\x02\x02" +
		"\x02\x85\x86\x07-\x02\x02\x86\x1A\x03\x02\x02\x02\x87\x88\x07/\x02\x02" +
		"\x88\x1C\x03\x02\x02\x02\x89\x8A\x07,\x02\x02\x8A\x1E\x03\x02\x02\x02" +
		"\x8B\x8C\x071\x02\x02\x8C \x03\x02\x02\x02\x8D\x8E\x07?\x02\x02\x8E\"" +
		"\x03\x02\x02\x02\x8F\x90\x07=\x02\x02\x90$\x03\x02\x02\x02\x91\x92\x07" +
		"*\x02\x02\x92&\x03\x02\x02\x02\x93\x94\x07+\x02\x02\x94(\x03\x02\x02\x02" +
		"\x95\x96\x07}\x02\x02\x96*\x03\x02\x02\x02\x97\x98\x07\x7F\x02\x02\x98" +
		",\x03\x02\x02\x02\x99\x9A\x07.\x02\x02\x9A.\x03\x02\x02\x02\x9B\x9D\t" +
		"\x04\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\x9C\x03" +
		"\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA1\b" +
		"\x18\x02\x02\xA10\x03\x02\x02\x02\n\x02glotz\x80\x9E\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MyGrammarLexer.__ATN) {
			MyGrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MyGrammarLexer._serializedATN));
		}

		return MyGrammarLexer.__ATN;
	}

}

